#include <assert.h>
#include <hip/hip_runtime.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define HIP_ASSERT(x) (assert((x) == hipSuccess))

__global__ void vecAdd(float *a, float *b, float *c, unsigned n) {
  int id = hipBlockDim_x * hipBlockIdx_x + hipThreadIdx_x;
  if (id < n)
    c[id] = a[id] + b[id];
}

int main(int argc, char *argv[]) {
  unsigned N = (argc > 1 ? atoi(argv[1]) : 1000000);
  unsigned trials = (argc > 2 ? atoi(argv[2]) : 1000);
  size_t bytes = N * sizeof(float);

  float *h_a = (float *)malloc(bytes);
  float *h_b = (float *)malloc(bytes);
  float *h_c = (float *)malloc(bytes);

  float *d_a, *d_b, *d_c;
  HIP_ASSERT(hipMalloc((void **)&d_a, bytes));
  HIP_ASSERT(hipMalloc((void **)&d_b, bytes));
  HIP_ASSERT(hipMalloc((void **)&d_c, bytes));

  for (unsigned i = 0; i < N; i++) {
    h_a[i] = i + 1.0;
    h_b[i] = N - i - 1.0;
  }

  HIP_ASSERT(hipMemcpy(d_a, h_a, bytes, hipMemcpyHostToDevice));
  HIP_ASSERT(hipMemcpy(d_b, h_b, bytes, hipMemcpyHostToDevice));

  int blockSize = 64;
  int gridSize = (N + blockSize - 1) / blockSize;

  for (unsigned t = 0; t < 100; t++)
    hipLaunchKernelGGL(vecAdd, gridSize, blockSize, 0, 0, d_a, d_b, d_c, N);

  HIP_ASSERT(hipDeviceSynchronize());

  clock_t t = clock();
  for (unsigned t = 0; t < trials; t++)
    hipLaunchKernelGGL(vecAdd, gridSize, blockSize, 0, 0, d_a, d_b, d_c, N);

  HIP_ASSERT(hipDeviceSynchronize());

  t = clock() - t;

  HIP_ASSERT(hipMemcpy(h_c, d_c, bytes, hipMemcpyDeviceToHost));

  for (unsigned i = 0; i < N; i++)
    assert(fabs(h_c[i] - N) < 1e-8);

  printf("N: %u blockSize: %d gridSize: %d time %e\n", N, blockSize, gridSize,
         (double)t / (CLOCKS_PER_SEC * trials));

  HIP_ASSERT(hipFree(d_a));
  HIP_ASSERT(hipFree(d_b));
  HIP_ASSERT(hipFree(d_c));

  free(h_a), free(h_b), free(h_c);

  return 0;
}
