// Modified version of code found here:
// https://www.olcf.ornl.gov/tutorials/opencl-vector-addition/
#include <assert.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define CL_TARGET_OPENCL_VERSION 220
#ifdef __APPLE__
#define clCreateCommandQueueWithProperties clCreateCommandQueue
#include <OpenCL/cl.h>
#define clCreateCommandQueueWithProperties clCreateCommandQueue
#else
#include <CL/cl.h>
#endif

// OpenCL kernel. Each work item takes care of one element of c
const char *knl_source =
    "__kernel void vecAdd(__global float *a,                         \n"
    "                     __global float *b,                         \n"
    "                     __global float *c,                         \n"
    "                     const unsigned n)                          \n"
    "{                                                               \n"
    "    //Get our global thread ID                                  \n"
    "    int id = get_global_id(0);                                  \n"
    "                                                                \n"
    "    //Make sure we do not go out of bounds                      \n"
    "    if (id < n)                                                 \n"
    "        c[id] = a[id] + b[id];                                  \n"
    "}                                                               \n";

int main(int argc, char *argv[]) {
  unsigned N = (argc > 1 ? atoi(argv[1]) : 1000000);
  unsigned trials = (argc > 2 ? atoi(argv[2]) : 1000);

  // Allocate memory for each vector on host
  float *h_a = (float *)calloc(3 * N, sizeof(float)), *h_b = h_a + N,
        *h_c = h_b + N;

  // Device input buffers
  cl_mem d_a, d_b, d_c;

  cl_platform_id platform; // OpenCL platform
  cl_device_id device_id;  // device ID
  cl_context context;      // context
  cl_command_queue queue;  // command queue
  cl_program program;      // program
  cl_kernel kernel;        // kernel

  // Initialize vectors on host
  for (unsigned i = 0; i < N; i++)
    h_a[i] = i + 1.0, h_b[i] = N - i - 1.0;

  size_t global_size, local_size;
  cl_int err;

  // Number of work items in each local work group
  local_size = 64;

  // Number of total work items - local_size must be devisor
  global_size = ((N + local_size - 1) / local_size) * local_size;

  // Bind to platform
  err = clGetPlatformIDs(1, &platform, NULL);

  // Get ID for the device
  err = clGetDeviceIDs(platform, CL_DEVICE_TYPE_ALL, 1, &device_id, NULL);

  // Create a context
  context = clCreateContext(0, 1, &device_id, NULL, NULL, &err);

  // Create a command queue
  queue = clCreateCommandQueueWithProperties(context, device_id, 0, &err);

  // Create the compute program from the source buffer
  program = clCreateProgramWithSource(context, 1, (const char **)&knl_source,
                                      NULL, &err);

  // Build the program executable
  clBuildProgram(program, 0, NULL, NULL, NULL, NULL);

  // Create the compute kernel in the program we wish to run
  kernel = clCreateKernel(program, "vecAdd", &err);

  // Create the input and output arrays in device memory for our calculation
  // Size, in bytes, of each vector
  size_t bytes = N * sizeof(float);
  d_a = clCreateBuffer(context, CL_MEM_READ_ONLY, bytes, NULL, NULL);
  d_b = clCreateBuffer(context, CL_MEM_READ_ONLY, bytes, NULL, NULL);
  d_c = clCreateBuffer(context, CL_MEM_WRITE_ONLY, bytes, NULL, NULL);

  // Write our data set into the input array in device memory
  err = clEnqueueWriteBuffer(queue, d_a, CL_TRUE, 0, bytes, h_a, 0, NULL, NULL);
  err |=
      clEnqueueWriteBuffer(queue, d_b, CL_TRUE, 0, bytes, h_b, 0, NULL, NULL);

  // Set the arguments to our compute kernel
  err = clSetKernelArg(kernel, 0, sizeof(cl_mem), &d_a);
  err |= clSetKernelArg(kernel, 1, sizeof(cl_mem), &d_b);
  err |= clSetKernelArg(kernel, 2, sizeof(cl_mem), &d_c);
  err |= clSetKernelArg(kernel, 3, sizeof(unsigned), &N);

  // Do a warm up run
  for (unsigned t = 0; t < 100; t++)
    err = clEnqueueNDRangeKernel(queue, kernel, 1, NULL, &global_size,
                                 &local_size, 0, NULL, NULL);
  clFinish(queue);

  // Time the vector addition
  clock_t t = clock();
  for (unsigned t = 0; t < trials; t++)
    err = clEnqueueNDRangeKernel(queue, kernel, 1, NULL, &global_size,
                                 &local_size, 0, NULL, NULL);

  // Wait for the command queue to get serviced before reading back results
  clFinish(queue);
  t = clock() - t;

  // Read the results from the device
  clEnqueueReadBuffer(queue, d_c, CL_TRUE, 0, bytes, h_c, 0, NULL, NULL);

  for (unsigned i = 0; i < N; i++)
    assert(fabs(h_c[i] - N) < 1e-8);

  printf("N: %u local: %lu global: %lu time: %e\n", N, local_size, global_size,
         (double)t / (CLOCKS_PER_SEC * trials));

  // release OpenCL resources
  clReleaseMemObject(d_a);
  clReleaseMemObject(d_b);
  clReleaseMemObject(d_c);
  clReleaseProgram(program);
  clReleaseKernel(kernel);
  clReleaseCommandQueue(queue);
  clReleaseContext(context);

  // release host memory
  free(h_a);

  return 0;
}
