#include <assert.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void sum_reduction(double *a, unsigned N, double *sum) {
#pragma nomp for reduce("sum", "+")
  for (unsigned i = 0; i < N; i++)
    sum[0] += a[i];
}

int main(int argc, char *argv[]) {
  unsigned N = 1 << 16;
  unsigned trials = 1000;

  double *a = (double *)malloc(N * sizeof(double));
  double seq_sum = 0, sum;

  for (int i = 0; i < N; i++) {
    a[i] = (double)rand();
    seq_sum += a[i];
  }

#pragma nomp init(argc, argv)

#pragma nomp update(to : a[0, N])

  // Do a warm up run
  for (unsigned t = 0; t < 100; t++)
    sum_reduction(a, N, &sum);

#pragma nomp sync
  clock_t t = clock();
  for (unsigned t = 0; t < trials; t++)
    sum_reduction(a, N, &sum);
#pragma nomp sync
  t = clock() - t;

#pragma nomp update(free : a[0, N])

  printf("seq_sum: %f, sum: %f \n", seq_sum, sum);
  assert(fabs(sum - seq_sum) < 1e-12);
  printf("N: %u time: %e\n", N, (double)t / (CLOCKS_PER_SEC * trials));

#pragma nomp finalize
  free(a);
  return 0;
}